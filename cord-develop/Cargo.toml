[workspace.package]
version = "0.9.2"
authors = ['Dhiway Networks <info@dhiway.com>']
edition = "2021"
homepage = "https://cord.network"
repository = "https://github.com/dhiway/cord"
license = "GPL-3.0"

[workspace]
resolver = "2"

members = [
	"node/cli",
	"node/rpc",
	"node/inspect",
	"node/testing",
	"pallets/*",
	"primitives/*",
	"runtime",
	"runtime/api/*",
	"runtime/constants",
	"runtime/authorities",
	"utilities",
	"test-utils",
	"test-utils/cli",
	"test-utils/client",
	"test-utils/runtime",
	"test-utils/runtime/client",
	"test-utils/runtime/transaction-pool",
	"test-utils/service",
]
default-members = ["node/cli"]

[workspace.dependencies]
log = { version = "0.4.20", default-features = false }
quote = { version = "1.0.33" }
serde = { version = "1.0.197", default-features = false }
serde-big-array = { version = "0.3.2" }
serde_derive = { version = "1.0.197" }
serde_json = { version = "1.0.114", default-features = false }
serde_yaml = { version = "0.9" }
syn = { version = "2.0.50" }
thiserror = { version = "1.0.48" }

[workspace.lints.rust]
suspicious_double_ref_op = { level = "allow", priority = 2 }
# non_camel_case_types = { level = "allow", priority = 1 }
non_camel_case_types = "allow"

[workspace.lints.clippy]
all = { level = "allow", priority = 0 }
correctness = { level = "warn", priority = 1 }
complexity = { level = "warn", priority = 1 }
if-same-then-else = { level = "allow", priority = 2 }
zero-prefixed-literal = { level = "allow", priority = 2 }            # 00_1000_000
type_complexity = { level = "allow", priority = 2 }                  # raison d'etre
nonminimal-bool = { level = "allow", priority = 2 }                  # maybe
borrowed-box = { level = "allow", priority = 2 }                     # Reasonable to fix this one
too-many-arguments = { level = "allow", priority = 2 }               # (Turning this on would lead to)
needless-lifetimes = { level = "allow", priority = 2 }               # generated code
unnecessary_cast = { level = "allow", priority = 2 }                 # Types may change
identity-op = { level = "allow", priority = 2 }                      # One case where we do 0 +
useless_conversion = { level = "allow", priority = 2 }               # Types may change
unit_arg = { level = "allow", priority = 2 }                         # stylistic
option-map-unit-fn = { level = "allow", priority = 2 }               # stylistic
bind_instead_of_map = { level = "allow", priority = 2 }              # stylistic
erasing_op = { level = "allow", priority = 2 }                       # E.g. 0 * DOLLARS
eq_op = { level = "allow", priority = 2 }                            # In tests we test equality.
while_immutable_condition = { level = "allow", priority = 2 }        # false positives
needless_option_as_deref = { level = "allow", priority = 2 }         # false positives
derivable_impls = { level = "allow", priority = 2 }                  # false positives
stable_sort_primitive = { level = "allow", priority = 2 }            # prefer stable sort
extra-unused-type-parameters = { level = "allow", priority = 2 }     # stylistic
default_constructed_unit_structs = { level = "allow", priority = 2 } # stylistic

[profile.release]
panic = 'unwind'
opt-level = 3

[profile.production]
inherits = "release"
lto = true
codegen-units = 1

[profile.dev]
split-debuginfo = "unpacked"

# make sure dev builds with backtrace do
# not slow us down
[profile.dev.package.backtrace]
inherits = "release"

[profile.testnet]
inherits = "release"
debug = 1               # debug symbols are useful for profilers
debug-assertions = true
overflow-checks = true

[profile.dev.package]
blake2 = { opt-level = 3 }
blake2b_simd = { opt-level = 3 }
chacha20poly1305 = { opt-level = 3 }
cranelift-codegen = { opt-level = 3 }
cranelift-wasm = { opt-level = 3 }
crc32fast = { opt-level = 3 }
crossbeam-deque = { opt-level = 3 }
crypto-mac = { opt-level = 3 }
curve25519-dalek = { opt-level = 3 }
ed25519-dalek = { opt-level = 3 }
flate2 = { opt-level = 3 }
futures-channel = { opt-level = 3 }
hash-db = { opt-level = 3 }
hashbrown = { opt-level = 3 }
hmac = { opt-level = 3 }
httparse = { opt-level = 3 }
integer-sqrt = { opt-level = 3 }
keccak = { opt-level = 3 }
libm = { opt-level = 3 }
librocksdb-sys = { opt-level = 3 }
libsecp256k1 = { opt-level = 3 }
libz-sys = { opt-level = 3 }
mio = { opt-level = 3 }
nalgebra = { opt-level = 3 }
num-bigint = { opt-level = 3 }
parking_lot = { opt-level = 3 }
parking_lot_core = { opt-level = 3 }
percent-encoding = { opt-level = 3 }
primitive-types = { opt-level = 3 }
ring = { opt-level = 3 }
rustls = { opt-level = 3 }
sha2 = { opt-level = 3 }
sha3 = { opt-level = 3 }
smallvec = { opt-level = 3 }
snow = { opt-level = 3 }
substrate-bip39 = { opt-level = 3 }
twox-hash = { opt-level = 3 }
uint = { opt-level = 3 }
x25519-dalek = { opt-level = 3 }
yamux = { opt-level = 3 }
zeroize = { opt-level = 3 }
